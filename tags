!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AUTOINDEX	server/Setting.hpp	/^const bool	AUTOINDEX = true;$/;"	v
AUTOINDEX_CGI	server/Setting.hpp	/^const std::string	AUTOINDEX_CGI = ".\/GenIndex.py";$/;"	v
AddServer	server/SocketCollection.cpp	/^void SocketCollection::AddServer(const webservconfig::Server &server)$/;"	f	class:SocketCollection
BUF_SIZE	server/Setting.hpp	/^const int			BUF_SIZE = 1024;$/;"	v
CGI_BUF	server/Setting.hpp	/^const int			CGI_BUF = 100;$/;"	v
CGI_EXE	server/Setting.hpp	/^const std::string	CGI_EXE = "\/usr\/local\/bin\/python3";$/;"	v
CGI_PATH	server/Setting.hpp	/^const std::string	CGI_PATH = "\/cgi-bin\/";$/;"	v
CLIENT_MAX_BODY	server/Setting.hpp	/^const unsigned long	CLIENT_MAX_BODY = 10000000;$/;"	v
CONFIGBASE_HPP	config/ConfigBase.hpp	/^# define CONFIGBASE_HPP$/;"	d
CONFIGTEST_MAIN	Makefile	/^CONFIGTEST_MAIN = .\/config\/test\/main.cpp$/;"	m
CONFIGTEST_NAME	Makefile	/^CONFIGTEST_NAME = webserv_t$/;"	m
CONFIGTEST_OBJ	Makefile	/^CONFIGTEST_OBJ = $(CONFIGTEST_MAIN:.cpp=.o)$/;"	m
CONFIGUTILS_HPP	config/ConfigUtils.hpp	/^# define CONFIGUTILS_HPP$/;"	d
CXX	Makefile	/^CXX = clang++ $(STDLIB)$/;"	m
CXX	www/upload_file/Makefile	/^CXX = clang++ $(STDLIB)$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -Wall -Werror -Wextra -I .\/server -I .\/config$/;"	m
CXXFLAGS	www/upload_file/Makefile	/^CXXFLAGS = -Wall -Werror -Wextra -I .\/temp_config -I .\/server$/;"	m
CheckNumberOfArgument	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::CheckNumberOfArgument(std::vector<std::string> line, int min_size, int max_size) const$/;"	f	class:webservconfig::ConfigBase
ConfigBase	config/ConfigBase.cpp	/^webservconfig::ConfigBase::ConfigBase():$/;"	f	class:webservconfig::ConfigBase
ConfigBase	config/ConfigBase.cpp	/^webservconfig::ConfigBase::ConfigBase(const ConfigBase &other)$/;"	f	class:webservconfig::ConfigBase
ConfigBase	config/ConfigBase.hpp	/^  class ConfigBase$/;"	c	namespace:webservconfig
CountFrontSpace	config/ConfigUtils.cpp	/^int webservconfig::CountFrontSpace(std::string line)$/;"	f	class:webservconfig
ERROR_MESSAGE_HPP	config/ErrorMessage.hpp	/^# define ERROR_MESSAGE_HPP$/;"	d
ERROR_MSG_INVALID_NUM_OF_ARG	config/ErrorMessage.hpp	/^# define ERROR_MSG_INVALID_NUM_OF_ARG(/;"	d
ERROR_MSG_NO_SUCH_FILE	config/ErrorMessage.hpp	/^# define ERROR_MSG_NO_SUCH_FILE /;"	d
EXIT_FAIL	config/ConfigUtils.hpp	/^#  define EXIT_FAIL /;"	d
EXIT_SUCCESS	config/ConfigUtils.hpp	/^#  define EXIT_SUCCESS /;"	d
GetAddressInfo	config/ConfigUtils.cpp	/^int webservconfig::GetAddressInfo(const std::string &address, const std::string &port, struct addrinfo **dst)$/;"	f	class:webservconfig
GetAutoIndex	config/ConfigBase.cpp	/^bool webservconfig::ConfigBase::GetAutoIndex() const { return (this->autoindex_); }$/;"	f	class:webservconfig::ConfigBase
GetAutoIndex	config/Server.cpp	/^bool webservconfig::Server::GetAutoIndex(const std::string &path) const { return (this->GetLocation(path).GetAutoIndex()); }$/;"	f	class:webservconfig::Server
GetCgiExtension	config/ConfigBase.cpp	/^const webservconfig::ConfigBase::extension_list_type &webservconfig::ConfigBase::GetCgiExtension() const { return (this->cgi_extension_); }$/;"	f	class:webservconfig::ConfigBase
GetCgiExtension	config/Server.cpp	/^const webservconfig::Server::extension_list_type &webservconfig::Server::GetCgiExtension(const std::string &path) const { return (this->GetLocation(path).GetCgiExtension()); }$/;"	f	class:webservconfig::Server
GetClientMaxBodySize	config/ConfigBase.cpp	/^webservconfig::ConfigBase::body_size_type webservconfig::ConfigBase::GetClientMaxBodySize() const { return (this->client_max_body_size_); }$/;"	f	class:webservconfig::ConfigBase
GetClientMaxBodySize	config/Server.cpp	/^webservconfig::Server::body_size_type webservconfig::Server::GetClientMaxBodySize(const std::string &path) const { return (this->GetLocation(path).GetClientMaxBodySize()); }$/;"	f	class:webservconfig::Server
GetErrorPage	config/ConfigBase.cpp	/^const std::string &webservconfig::ConfigBase::GetErrorPage(int code) const$/;"	f	class:webservconfig::ConfigBase
GetErrorPage	config/ConfigBase.cpp	/^const std::string &webservconfig::ConfigBase::GetErrorPage(std::string code) const$/;"	f	class:webservconfig::ConfigBase
GetErrorPage	config/ConfigBase.cpp	/^const webservconfig::ConfigBase::error_page_type &webservconfig::ConfigBase::GetErrorPage() const { return (this->error_page_); }$/;"	f	class:webservconfig::ConfigBase
GetErrorPage	config/Server.cpp	/^const webservconfig::Server::error_page_type &webservconfig::Server::GetErrorPage(const std::string &path) const { return (this->GetLocation(path).GetErrorPage()); }$/;"	f	class:webservconfig::Server
GetFilePath	config/ServerCollection.cpp	/^std::string webservconfig::ServerCollection::GetFilePath() const$/;"	f	class:webservconfig::ServerCollection
GetIndex	config/ConfigBase.cpp	/^const webservconfig::ConfigBase::index_type &webservconfig::ConfigBase::GetIndex() const { return (this->index_); }$/;"	f	class:webservconfig::ConfigBase
GetIndex	config/Server.cpp	/^const webservconfig::Server::index_type &webservconfig::Server::GetIndex(const std::string &path) const { return (this->GetLocation(path).GetIndex()); }$/;"	f	class:webservconfig::Server
GetLimitExceptByDenyAll	config/ConfigBase.cpp	/^const webservconfig::ConfigBase::limit_except_type &webservconfig::ConfigBase::GetLimitExceptByDenyAll() const { return (this->limit_except_); }$/;"	f	class:webservconfig::ConfigBase
GetLimitExceptByDenyAll	config/Server.cpp	/^const webservconfig::Server::limit_except_type &webservconfig::Server::GetLimitExceptByDenyAll(const std::string &path) const { return (this->GetLocation(path).GetLimitExceptByDenyAll()); }$/;"	f	class:webservconfig::Server
GetListenStringV4	config/ConfigBase.cpp	/^const webservconfig::ConfigBase::listen_string_type &webservconfig::ConfigBase::GetListenStringV4() const { return (this->listen_v4_string_); }$/;"	f	class:webservconfig::ConfigBase
GetListenStringV6	config/ConfigBase.cpp	/^const webservconfig::ConfigBase::listen_string_type &webservconfig::ConfigBase::GetListenStringV6() const { return (this->listen_v6_string_); }$/;"	f	class:webservconfig::ConfigBase
GetListenV4	config/ConfigBase.cpp	/^const webservconfig::ConfigBase::listen_v4_type &webservconfig::ConfigBase::GetListenV4() const { return (this->listen_v4_); }$/;"	f	class:webservconfig::ConfigBase
GetListenV6	config/ConfigBase.cpp	/^const webservconfig::ConfigBase::listen_v6_type &webservconfig::ConfigBase::GetListenV6() const { return (this->listen_v6_); }$/;"	f	class:webservconfig::ConfigBase
GetLocation	config/Server.cpp	/^const std::vector<webservconfig::Location> &webservconfig::Server::GetLocation() const$/;"	f	class:webservconfig::Server
GetLocation	config/Server.cpp	/^const webservconfig::Location &webservconfig::Server::GetLocation(const std::string &path) const$/;"	f	class:webservconfig::Server
GetLocationPath	config/Location.cpp	/^std::string webservconfig::Location::GetLocationPath() const$/;"	f	class:webservconfig::Location
GetReturn	config/ConfigBase.cpp	/^const webservconfig::ConfigBase::return_type &webservconfig::ConfigBase::GetReturn() const { return (this->return_); }$/;"	f	class:webservconfig::ConfigBase
GetReturn	config/Server.cpp	/^const webservconfig::Server::return_type &webservconfig::Server::GetReturn(const std::string &path) const { return (this->GetLocation(path).GetReturn()); }$/;"	f	class:webservconfig::Server
GetRoot	config/ConfigBase.cpp	/^const std::string &webservconfig::ConfigBase::GetRoot() const { return (this->root_); }$/;"	f	class:webservconfig::ConfigBase
GetRoot	config/Server.cpp	/^const std::string &webservconfig::Server::GetRoot(const std::string &path) const { return (this->GetLocation(path).GetRoot()); }$/;"	f	class:webservconfig::Server
GetServer	config/ServerCollection.cpp	/^const std::vector<webservconfig::Server> &webservconfig::ServerCollection::GetServer() const$/;"	f	class:webservconfig::ServerCollection
GetServerName	config/ConfigBase.cpp	/^const webservconfig::ConfigBase::server_name_list_type &webservconfig::ConfigBase::GetServerName() const { return (this->server_name_); }$/;"	f	class:webservconfig::ConfigBase
GetSocket	server/SocketCollection.cpp	/^const std::vector<Socket> &SocketCollection::GetSocket() const { return (this->socket_vector_); }$/;"	f	class:SocketCollection
GetUploadPath	config/ConfigBase.cpp	/^const std::string &webservconfig::ConfigBase::GetUploadPath() const { return (this->upload_path_); }$/;"	f	class:webservconfig::ConfigBase
GetUploadPath	config/Server.cpp	/^const std::string &webservconfig::Server::GetUploadPath(const std::string &path) const { return (this->GetLocation(path).GetUploadPath()); }$/;"	f	class:webservconfig::Server
InitAutoindex	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::InitAutoindex(std::vector<std::string> line)$/;"	f	class:webservconfig::ConfigBase
InitCgiExtension	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::InitCgiExtension(std::vector<std::string> line)$/;"	f	class:webservconfig::ConfigBase
InitClientMaxBodySize	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::InitClientMaxBodySize(std::vector<std::string> line)$/;"	f	class:webservconfig::ConfigBase
InitErrorPage	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::InitErrorPage(std::vector<std::string> line)$/;"	f	class:webservconfig::ConfigBase
InitIndex	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::InitIndex(std::vector<std::string> line)$/;"	f	class:webservconfig::ConfigBase
InitLimitExceptByDenyAll	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::InitLimitExceptByDenyAll(std::vector<std::string> line)$/;"	f	class:webservconfig::ConfigBase
InitListen	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::InitListen(std::vector<std::string> line)$/;"	f	class:webservconfig::ConfigBase
InitLocation	config/Server.cpp	/^void webservconfig::Server::InitLocation(std::vector<std::string> line, std::istringstream &input)$/;"	f	class:webservconfig::Server
InitReturn	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::InitReturn(std::vector<std::string> line)$/;"	f	class:webservconfig::ConfigBase
InitRoot	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::InitRoot(std::vector<std::string> line)$/;"	f	class:webservconfig::ConfigBase
InitServer	config/ServerCollection.cpp	/^void webservconfig::ServerCollection::InitServer(std::vector<std::string> line, std::ifstream &input_file)$/;"	f	class:webservconfig::ServerCollection
InitServerName	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::InitServerName(std::vector<std::string> line)$/;"	f	class:webservconfig::ConfigBase
InitUploadPath	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::InitUploadPath(std::vector<std::string> line)$/;"	f	class:webservconfig::ConfigBase
IsComposed	config/ConfigBase.cpp	/^bool webservconfig::ConfigBase::IsComposed(std::string str, std::string charset)$/;"	f	class:webservconfig::ConfigBase
LOCATION_HPP	config/Location.hpp	/^# define LOCATION_HPP$/;"	d
Location	config/Location.cpp	/^webservconfig::Location::Location():$/;"	f	class:webservconfig::Location
Location	config/Location.cpp	/^webservconfig::Location::Location(const Location &other)$/;"	f	class:webservconfig::Location
Location	config/Location.cpp	/^webservconfig::Location::Location(std::string block, std::string location):$/;"	f	class:webservconfig::Location
Location	config/Location.hpp	/^  class Location: public ConfigBase$/;"	c	namespace:webservconfig
MAIN	Makefile	/^MAIN = .\/main.cpp$/;"	m
MAIN_OBJ	Makefile	/^MAIN_OBJ = $(MAIN:.cpp=.o)$/;"	m
MAX_SESSION	server/Setting.hpp	/^const int			MAX_SESSION = 10;$/;"	v
MIME_FILE	server/Setting.hpp	/^const std::string	MIME_FILE = ".\/server\/mime";$/;"	v
NAME	Makefile	/^NAME = webserv$/;"	m
NAME	www/upload_file/Makefile	/^NAME = webserv$/;"	m
NOT_FOUND_FILE	server/Setting.hpp	/^const std::string	NOT_FOUND_FILE = "\/404.html";$/;"	v
OBJ	Makefile	/^OBJ = $(SRC:.cpp=.o)$/;"	m
OBJ	www/upload_file/Makefile	/^OBJ = $(SRC:.cpp=.o)$/;"	m
ParseLocationBlock	config/Location.cpp	/^void webservconfig::Location::ParseLocationBlock()$/;"	f	class:webservconfig::Location
ParseServerBlock	config/Server.cpp	/^void webservconfig::Server::ParseServerBlock()$/;"	f	class:webservconfig::Server
PortVec	server/util_func.cpp	/^std::vector<std::string> PortVec(webservconfig::ServerCollection &config)$/;"	f
PutAutoIndex	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::PutAutoIndex(std::ostream &os, std::string indent) const$/;"	f	class:webservconfig::ConfigBase
PutCgiExtension	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::PutCgiExtension(std::ostream &os, std::string indent) const$/;"	f	class:webservconfig::ConfigBase
PutClientMaxBodySize	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::PutClientMaxBodySize(std::ostream &os, std::string indent) const$/;"	f	class:webservconfig::ConfigBase
PutConf	main.cpp	/^void	PutConf(webservconfig::Server	&serv, RequestParser &request)$/;"	f
PutConfig	config/ServerCollection.cpp	/^std::ostream& webservconfig::ServerCollection::PutConfig(std::ostream& os) const$/;"	f	class:webservconfig::ServerCollection
PutErrorPage	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::PutErrorPage(std::ostream &os, std::string indent) const$/;"	f	class:webservconfig::ConfigBase
PutIndex	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::PutIndex(std::ostream &os, std::string indent) const$/;"	f	class:webservconfig::ConfigBase
PutLimitExceptByDenyAll	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::PutLimitExceptByDenyAll(std::ostream &os, std::string indent) const$/;"	f	class:webservconfig::ConfigBase
PutListen	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::PutListen(std::ostream &os, std::string indent) const$/;"	f	class:webservconfig::ConfigBase
PutLocation	config/Location.cpp	/^void webservconfig::Location::PutLocation(std::ostream& os, std::string first_indent, std::string indent) const$/;"	f	class:webservconfig::Location
PutReturn	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::PutReturn(std::ostream &os, std::string indent) const$/;"	f	class:webservconfig::ConfigBase
PutRoot	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::PutRoot(std::ostream &os, std::string indent) const$/;"	f	class:webservconfig::ConfigBase
PutServer	config/Server.cpp	/^std::ostream& webservconfig::Server::PutServer(std::ostream& os, std::string first_indent, std::string indent) const$/;"	f	class:webservconfig::Server
PutServerName	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::PutServerName(std::ostream &os, std::string indent) const$/;"	f	class:webservconfig::ConfigBase
PutUploadPath	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::PutUploadPath(std::ostream &os, std::string indent) const$/;"	f	class:webservconfig::ConfigBase
REQUESTPARSER_HPP	server/RequestParser.hpp	/^# define REQUESTPARSER_HPP$/;"	d
RESPONSE_BUFFER_SIZE	server/Setting.hpp	/^const unsigned long	RESPONSE_BUFFER_SIZE = 1000;$/;"	v
RESPONSE_HPP	server/Response.hpp	/^# define RESPONSE_HPP$/;"	d
RM	Makefile	/^RM = rm -f$/;"	m
RM	www/upload_file/Makefile	/^RM = rm -f$/;"	m
RequestParser	server/RequestParser.cpp	/^RequestParser::RequestParser(RequestParser const &copy)$/;"	f	class:RequestParser
RequestParser	server/RequestParser.cpp	/^RequestParser::RequestParser(std::string request_):request(request_),$/;"	f	class:RequestParser
RequestParser	server/RequestParser.cpp	/^RequestParser::RequestParser(void) {}$/;"	f	class:RequestParser
RequestParser	server/RequestParser.hpp	/^class RequestParser$/;"	c
Response	server/Response.cpp	/^Response::Response(RequestParser &request, webservconfig::Server &serv)$/;"	f	class:Response
Response	server/Response.cpp	/^Response::Response(Response const &copy)$/;"	f	class:Response
Response	server/Response.cpp	/^Response::Response(void) {}$/;"	f	class:Response
Response	server/Response.hpp	/^class Response$/;"	c
SERVERCOLLECTION_HPP	config/ServerCollection.hpp	/^# define SERVERCOLLECTION_HPP$/;"	d
SERVER_HPP	config/Server.hpp	/^# define SERVER_HPP$/;"	d
SETTING_HPP	server/Setting.hpp	/^# define SETTING_HPP$/;"	d
SOCKETCOLLECTION_HPP	server/SocketCollection.hpp	/^# define SOCKETCOLLECTION_HPP$/;"	d
SOCKET_HPP	server/Socket.hpp	/^# define SOCKET_HPP$/;"	d
SRC	www/upload_file/Makefile	/^SRC =	.\/main\/main.cpp \\$/;"	m
STATUS_BAD_REQUEST	server/Setting.hpp	/^const int	STATUS_BAD_REQUEST = 400;$/;"	v
STATUS_FORBIDDEN	server/Setting.hpp	/^const int	STATUS_FORBIDDEN = 403;$/;"	v
STATUS_INTERNAL_SERVER_ERROR	server/Setting.hpp	/^const int	STATUS_INTERNAL_SERVER_ERROR = 500;$/;"	v
STATUS_METHOD_NOT_ALLOWED	server/Setting.hpp	/^const int	STATUS_METHOD_NOT_ALLOWED = 405;$/;"	v
STATUS_MOVED_PERMANENTLY	server/Setting.hpp	/^const int	STATUS_MOVED_PERMANENTLY = 301;$/;"	v
STATUS_NOT_FOUND	server/Setting.hpp	/^const int	STATUS_NOT_FOUND = 404;$/;"	v
STATUS_NOT_IMPLEMENTED	server/Setting.hpp	/^const int	STATUS_NOT_IMPLEMENTED = 501;$/;"	v
STATUS_OK	server/Setting.hpp	/^const int	STATUS_OK = 200;$/;"	v
STATUS_PAYLOAD_TOO_LARGE	server/Setting.hpp	/^const int	STATUS_PAYLOAD_TOO_LARGE = 413;$/;"	v
STDLIB	Makefile	/^STDLIB = -std=c++98$/;"	m
STDLIB	www/upload_file/Makefile	/^STDLIB = -std=c++98$/;"	m
Server	config/Server.cpp	/^webservconfig::Server::Server():$/;"	f	class:webservconfig::Server
Server	config/Server.cpp	/^webservconfig::Server::Server(const Server &other)$/;"	f	class:webservconfig::Server
Server	config/Server.cpp	/^webservconfig::Server::Server(std::string block):$/;"	f	class:webservconfig::Server
Server	config/Server.hpp	/^  class Server: public ConfigBase$/;"	c	namespace:webservconfig
ServerCollection	config/ServerCollection.cpp	/^webservconfig::ServerCollection::ServerCollection():$/;"	f	class:webservconfig::ServerCollection
ServerCollection	config/ServerCollection.cpp	/^webservconfig::ServerCollection::ServerCollection(const ServerCollection &other)$/;"	f	class:webservconfig::ServerCollection
ServerCollection	config/ServerCollection.cpp	/^webservconfig::ServerCollection::ServerCollection(std::string path):$/;"	f	class:webservconfig::ServerCollection
ServerCollection	config/ServerCollection.hpp	/^  class ServerCollection: public ConfigBase$/;"	c	namespace:webservconfig
SetAutoIndex	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::SetAutoIndex(bool autoindex) { this->autoindex_ = autoindex; }$/;"	f	class:webservconfig::ConfigBase
SetCgiExtension	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::SetCgiExtension(const extension_list_type &extension) { this->cgi_extension_ = extension; }$/;"	f	class:webservconfig::ConfigBase
SetClientMaxBodySize	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::SetClientMaxBodySize(webservconfig::ConfigBase::body_size_type size) { this->client_max_body_size_ = size; }$/;"	f	class:webservconfig::ConfigBase
SetErrorPage	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::SetErrorPage(const webservconfig::ConfigBase::error_page_type &error_page) { this->error_page_ = error_page; }$/;"	f	class:webservconfig::ConfigBase
SetIndex	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::SetIndex(const webservconfig::ConfigBase::index_type &index) { this->index_ = index; }$/;"	f	class:webservconfig::ConfigBase
SetLimitExceptByDenyAll	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::SetLimitExceptByDenyAll(const limit_except_type &limit_except) { this->limit_except_ = limit_except; }$/;"	f	class:webservconfig::ConfigBase
SetListenV4	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::SetListenV4(const webservconfig::ConfigBase::listen_v4_type &listen) { this->listen_v4_ = listen; }$/;"	f	class:webservconfig::ConfigBase
SetListenV6	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::SetListenV6(const webservconfig::ConfigBase::listen_v6_type &listen) { this->listen_v6_ = listen; }$/;"	f	class:webservconfig::ConfigBase
SetReturn	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::SetReturn(const webservconfig::ConfigBase::return_type &rt) { this->return_ = rt; }$/;"	f	class:webservconfig::ConfigBase
SetRoot	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::SetRoot(const std::string &path) { this->root_ = path; }$/;"	f	class:webservconfig::ConfigBase
SetServerName	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::SetServerName(const server_name_list_type &server_name) { this->server_name_ = server_name; }$/;"	f	class:webservconfig::ConfigBase
SetUploadPath	config/ConfigBase.cpp	/^void webservconfig::ConfigBase::SetUploadPath(const std::string &path) { this->upload_path_ = path; }$/;"	f	class:webservconfig::ConfigBase
Socket	server/Socket.cpp	/^Socket::Socket (Socket const &copy)$/;"	f	class:Socket
Socket	server/Socket.cpp	/^Socket::Socket(const std::string &address, const std::string &port):$/;"	f	class:Socket
Socket	server/Socket.cpp	/^Socket::Socket(std::string port_):$/;"	f	class:Socket
Socket	server/Socket.cpp	/^Socket::Socket(void) {}$/;"	f	class:Socket
Socket	server/Socket.hpp	/^class Socket$/;"	c
SocketCollection	server/SocketCollection.cpp	/^SocketCollection::SocketCollection():$/;"	f	class:SocketCollection
SocketCollection	server/SocketCollection.cpp	/^SocketCollection::SocketCollection(const SocketCollection &other)$/;"	f	class:SocketCollection
SocketCollection	server/SocketCollection.cpp	/^SocketCollection::SocketCollection(const webservconfig::ServerCollection &config)$/;"	f	class:SocketCollection
SocketCollection	server/SocketCollection.hpp	/^class SocketCollection$/;"	c
SplitLine	config/ConfigBase.cpp	/^std::vector<std::string> webservconfig::ConfigBase::SplitLine(std::string line)$/;"	f	class:webservconfig::ConfigBase
SplitLine	config/ConfigUtils.cpp	/^std::vector<std::string> webservconfig::SplitLine(std::string line)$/;"	f	class:webservconfig
StrPort	server/Socket.hpp	/^		std::string				StrPort;$/;"	m	class:Socket
UPLOAD_PATH	server/Setting.hpp	/^const std::string	UPLOAD_PATH = "\/upload_file\/";$/;"	v
address	server/Socket.hpp	/^		std::string       address;$/;"	m	class:Socket
ai	server/Socket.hpp	/^		struct addrinfo		*ai;$/;"	m	class:Socket	typeref:struct:Socket::addrinfo
autoindex_	config/ConfigBase.hpp	/^      bool                      autoindex_;$/;"	m	class:webservconfig::ConfigBase
autoindex_c	server/Response.cpp	/^int		Response::autoindex_c(const char *path, RequestParser &request, bool autoindex)$/;"	f	class:Response
block_	config/Location.hpp	/^      std::string block_;$/;"	m	class:webservconfig::Location
block_	config/Server.hpp	/^      std::string block_;$/;"	m	class:webservconfig::Server
body	server/RequestParser.hpp	/^		std::string					body;$/;"	m	class:RequestParser
body	server/Response.hpp	/^		std::string body;$/;"	m	class:Response
body	www/cgi-bin/delete_cgi.py	/^    body = file_name + ' has been removed.'$/;"	v
body	www/cgi-bin/delete_cgi.py	/^    body = file_name + ' is not found.'$/;"	v
body	www/cgi-bin/upload_cgi.py	/^    body = file_name + ' already exists.'$/;"	v
body	www/cgi-bin/upload_cgi.py	/^    body = file_name + ' has been uploaded.'$/;"	v
body_size_type	config/ConfigBase.hpp	/^      typedef long long                                         body_size_type;$/;"	t	class:webservconfig::ConfigBase
cgi	www/cgi-bin/delete_cgi.py	/^import cgi$/;"	i
cgi	www/cgi-bin/sample.py	/^import cgi$/;"	i
cgi	www/cgi-bin/upload_cgi.py	/^import cgi$/;"	i
cgi_exe	server/Response.cpp	/^int		Response::cgi_exe(std::string const cgi_file, RequestParser &request, struct stat eval_cgi)$/;"	f	class:Response
cgi_extension_	config/ConfigBase.hpp	/^      extension_list_type       cgi_extension_;$/;"	m	class:webservconfig::ConfigBase
cgi_extension_flag_	config/ConfigBase.hpp	/^      bool                      cgi_extension_flag_;$/;"	m	class:webservconfig::ConfigBase
cgitb	www/cgi-bin/delete_cgi.py	/^import cgitb$/;"	i
cgitb	www/cgi-bin/sample.py	/^import cgitb$/;"	i
cgitb	www/cgi-bin/upload_cgi.py	/^import cgitb$/;"	i
check_redirect	server/Response.cpp	/^void	Response::check_redirect(RequestParser &request)$/;"	f	class:Response
chunk	www/cgi-bin/upload_cgi.py	/^        chunk = item.file.read(1000000)$/;"	v
chunked_split	server/RequestParser.cpp	/^void		RequestParser::chunked_split(void)$/;"	f	class:RequestParser
client_max_body_size_	config/ConfigBase.hpp	/^      body_size_type            client_max_body_size_;$/;"	m	class:webservconfig::ConfigBase
content_length	server/RequestParser.hpp	/^		std::string					content_length;$/;"	m	class:RequestParser
content_type	server/RequestParser.hpp	/^		std::string					content_type;$/;"	m	class:RequestParser
content_type	server/Response.hpp	/^		std::string	content_type;$/;"	m	class:Response
content_type_set	server/Response.cpp	/^void	Response::content_type_set(std::string file_path)$/;"	f	class:Response
cwd	data/GenIndex.py	/^cwd = (env["REQUEST_URI"])$/;"	v
default_location_	config/Server.hpp	/^      Location default_location_;$/;"	m	class:webservconfig::Server
delete_file	server/Response.cpp	/^int		Response::delete_file(const char *path)$/;"	f	class:Response
env	data/GenIndex.py	/^env = os.environ$/;"	v
environ	docker_nginx/normal_nginx/cgifile/put_env.py	/^environ = os.environ$/;"	v
environ	docker_nginx/upload_module/cgifile/put_env.py	/^environ = os.environ$/;"	v
error_body_set	server/Response.cpp	/^void	Response::error_body_set(std::string error_path)$/;"	f	class:Response
error_page_	config/ConfigBase.hpp	/^      error_page_type           error_page_;$/;"	m	class:webservconfig::ConfigBase
error_page_type	config/ConfigBase.hpp	/^      typedef std::map<int, std::string>                        error_page_type;$/;"	t	class:webservconfig::ConfigBase
extension_list_type	config/ConfigBase.hpp	/^      typedef std::vector<std::string>                          extension_list_type;$/;"	t	class:webservconfig::ConfigBase
file_name	www/cgi-bin/delete_cgi.py	/^file_name = form["delfile"].value$/;"	v
file_name	www/cgi-bin/upload_cgi.py	/^file_name = form["upfile"].filename$/;"	v
file_path_	config/ServerCollection.hpp	/^      std::string           file_path_;$/;"	m	class:webservconfig::ServerCollection
files	data/GenIndex.py	/^files = sorted(os.listdir("www" + cwd))$/;"	v
form	www/cgi-bin/delete_cgi.py	/^form = cgi.FieldStorage()$/;"	v
form	www/cgi-bin/sample.py	/^form = cgi.FieldStorage()$/;"	v
form	www/cgi-bin/upload_cgi.py	/^form = cgi.FieldStorage()$/;"	v
g_SIGPIPE_FLAG	main.cpp	/^int		g_SIGPIPE_FLAG = 0;$/;"	v
get_StrPort	server/Socket.cpp	/^const std::string &Socket::get_StrPort() const { return (this->StrPort); }$/;"	f	class:Socket
get_address	server/Socket.cpp	/^const std::string &Socket::get_address() const { return (this->address); }$/;"	f	class:Socket
get_body	server/RequestParser.cpp	/^std::string	RequestParser::get_body(void) {return (this->body);}$/;"	f	class:RequestParser
get_body	server/Response.cpp	/^std::string Response::get_body(void) {return (body);}$/;"	f	class:Response
get_content_length	server/RequestParser.cpp	/^std::string	RequestParser::get_content_length(void) {return (this->content_length);}$/;"	f	class:RequestParser
get_content_type	server/RequestParser.cpp	/^std::string	RequestParser::get_content_type(void) {return (this->content_type);}$/;"	f	class:RequestParser
get_content_type	server/Response.cpp	/^std::string Response::get_content_type(void) {return (content_type);}$/;"	f	class:Response
get_field	server/RequestParser.cpp	/^std::string	RequestParser::get_field(std::string key)$/;"	f	class:RequestParser
get_header	server/RequestParser.cpp	/^std::string	RequestParser::get_header(void) {return (this->header);}$/;"	f	class:RequestParser
get_header	server/Response.cpp	/^std::string Response::get_header(void) {return (header);}$/;"	f	class:Response
get_in_addr	config/ConfigUtils.cpp	/^void *webservconfig::get_in_addr(struct sockaddr *sa)$/;"	f	class:webservconfig
get_in_port	config/ConfigUtils.cpp	/^u_short webservconfig::get_in_port(struct sockaddr *sa)$/;"	f	class:webservconfig
get_listenfd	server/Socket.cpp	/^int		Socket::get_listenfd() const$/;"	f	class:Socket
get_method	server/RequestParser.cpp	/^std::string	RequestParser::get_method(void) {return (this->method);}$/;"	f	class:RequestParser
get_path_info	server/RequestParser.cpp	/^std::string	RequestParser::get_path_info(void) {return (this->path_info);}$/;"	f	class:RequestParser
get_path_translated	server/RequestParser.cpp	/^std::string	RequestParser::get_path_translated(void) {return (this->path_translated);}$/;"	f	class:RequestParser
get_port	server/Socket.cpp	/^int Socket::get_port() const { return (this->port); }$/;"	f	class:Socket
get_query_string	server/RequestParser.cpp	/^std::string	RequestParser::get_query_string(void) {return (this->query_string);}$/;"	f	class:RequestParser
get_script_name	server/RequestParser.cpp	/^std::string	RequestParser::get_script_name(void) {return (this->script_name);}$/;"	f	class:RequestParser
get_server	server/Socket.cpp	/^const webservconfig::Server &Socket::get_server() const { return (this->server); }$/;"	f	class:Socket
get_status	server/Response.cpp	/^int			Response::get_status(void) {return (status);}$/;"	f	class:Response
get_transfer_encoding	server/RequestParser.cpp	/^std::string	RequestParser::get_transfer_encoding(void) {return (this->transfer_encoding);}$/;"	f	class:RequestParser
get_uri	server/RequestParser.cpp	/^std::string	RequestParser::get_uri(void) {return (this->uri);}$/;"	f	class:RequestParser
glob	data/GenIndex.py	/^import glob$/;"	i
header	server/RequestParser.hpp	/^		std::string					header;$/;"	m	class:RequestParser
header	server/Response.hpp	/^		std::string	header;$/;"	m	class:Response
header_not_found	server/Response.cpp	/^void	Response::header_not_found(std::ostringstream &oss)$/;"	f	class:Response
header_ok	server/Response.cpp	/^void	Response::header_ok(std::ostringstream &oss)$/;"	f	class:Response
header_set	server/Response.cpp	/^void	Response::header_set(std::ostringstream &oss)$/;"	f	class:Response
header_split	server/RequestParser.cpp	/^void		RequestParser::header_split(void)$/;"	f	class:RequestParser
hints	server/Socket.hpp	/^		struct addrinfo		hints;$/;"	m	class:Socket	typeref:struct:Socket::addrinfo
index_	config/ConfigBase.hpp	/^      index_type                index_;$/;"	m	class:webservconfig::ConfigBase
index_flag_	config/ConfigBase.hpp	/^      bool                      index_flag_;$/;"	m	class:webservconfig::ConfigBase
index_search	server/Response.cpp	/^std::string	Response::index_search(std::string root, std::vector<std::string> index)$/;"	f	class:Response
index_type	config/ConfigBase.hpp	/^      typedef std::vector<std::string>                          index_type;$/;"	t	class:webservconfig::ConfigBase
input	docker_nginx/normal_nginx/cgifile/test.py	/^input = sys.stdin.read()$/;"	v
input	docker_nginx/upload_module/cgifile/input.py	/^input = sys.stdin.read()$/;"	v
input	docker_nginx/upload_module/cgifile/test.py	/^input = sys.stdin.read()$/;"	v
input	www/cgi-bin/test.py	/^input = sys.stdin.read()$/;"	v
item	www/cgi-bin/upload_cgi.py	/^    item = form['upfile']$/;"	v
limit_except_	config/ConfigBase.hpp	/^      limit_except_type         limit_except_;$/;"	m	class:webservconfig::ConfigBase
limit_except_type	config/ConfigBase.hpp	/^      typedef std::map<std::string, bool>                       limit_except_type;$/;"	t	class:webservconfig::ConfigBase
listen_string_type	config/ConfigBase.hpp	/^      typedef std::vector<std::pair<std::string, std::string> > listen_string_type;$/;"	t	class:webservconfig::ConfigBase
listen_v4_	config/ConfigBase.hpp	/^      listen_v4_type            listen_v4_;$/;"	m	class:webservconfig::ConfigBase
listen_v4_string_	config/ConfigBase.hpp	/^      listen_string_type        listen_v4_string_;$/;"	m	class:webservconfig::ConfigBase
listen_v4_type	config/ConfigBase.hpp	/^      typedef std::vector<std::pair<struct in_addr, int> >      listen_v4_type;$/;"	t	class:webservconfig::ConfigBase
listen_v6_	config/ConfigBase.hpp	/^      listen_v6_type            listen_v6_;$/;"	m	class:webservconfig::ConfigBase
listen_v6_string_	config/ConfigBase.hpp	/^      listen_string_type        listen_v6_string_;$/;"	m	class:webservconfig::ConfigBase
listen_v6_type	config/ConfigBase.hpp	/^      typedef std::vector<std::pair<struct in6_addr, int> >     listen_v6_type;$/;"	t	class:webservconfig::ConfigBase
listenfd	server/Socket.hpp	/^		int								listenfd;$/;"	m	class:Socket
location_	config/Location.hpp	/^      std::string location_;$/;"	m	class:webservconfig::Location
location_	config/Server.hpp	/^      std::vector<Location> location_;$/;"	m	class:webservconfig::Server
main	config/test/main.cpp	/^int main(int argc, char *argv[])$/;"	f
main	main.cpp	/^int	main(int argc, char **argv)$/;"	f
main	www/upload_file/main.c	/^int		main(int argc, char **argv)$/;"	f
method	server/RequestParser.hpp	/^		std::string					method;$/;"	m	class:RequestParser
method_allowed	server/Response.cpp	/^bool	Response::method_allowed(std::vector<std::string> allowed, RequestParser &request)$/;"	f	class:Response
method_limited	server/Response.cpp	/^bool	Response::method_limited(std::vector<std::string> limited, RequestParser &request)$/;"	f	class:Response
open_html	server/Response.cpp	/^int		Response::open_html(std::string html_file)$/;"	f	class:Response
operator <<	config/ConfigUtils.cpp	/^std::ostream& operator<<(std::ostream& os, struct addrinfo ai)$/;"	f
operator <<	config/ServerCollection.cpp	/^std::ostream& operator<<(std::ostream& os, const webservconfig::ServerCollection& config)$/;"	f
operator =	config/ConfigBase.cpp	/^const webservconfig::ConfigBase &webservconfig::ConfigBase::operator=(const ConfigBase &rhs)$/;"	f	class:webservconfig::ConfigBase
operator =	config/Location.cpp	/^const webservconfig::Location &webservconfig::Location::operator=(const Location &rhs)$/;"	f	class:webservconfig::Location
operator =	config/Server.cpp	/^const webservconfig::Server &webservconfig::Server::operator=(const Server &rhs)$/;"	f	class:webservconfig::Server
operator =	config/ServerCollection.cpp	/^const webservconfig::ServerCollection &webservconfig::ServerCollection::operator=(const ServerCollection &rhs)$/;"	f	class:webservconfig::ServerCollection
operator =	server/RequestParser.cpp	/^RequestParser &RequestParser::operator=(RequestParser const &obj)$/;"	f	class:RequestParser
operator =	server/Response.cpp	/^Response &Response::operator=(Response const &obj)$/;"	f	class:Response
operator =	server/Socket.cpp	/^Socket &Socket::operator=(Socket const &obj)$/;"	f	class:Socket
operator =	server/SocketCollection.cpp	/^SocketCollection &SocketCollection::operator=(const SocketCollection &rhs)$/;"	f	class:SocketCollection
os	data/GenIndex.py	/^import os$/;"	i
os	docker_nginx/normal_nginx/cgifile/put_env.py	/^import os$/;"	i
os	docker_nginx/upload_module/cgifile/input.py	/^import os$/;"	i
os	docker_nginx/upload_module/cgifile/put_env.py	/^import os$/;"	i
os	www/cgi-bin/delete_cgi.py	/^import os$/;"	i
os	www/cgi-bin/sample.py	/^import os$/;"	i
os	www/cgi-bin/upload_cgi.py	/^import os$/;"	i
path	www/cgi-bin/delete_cgi.py	/^path = upload_path + file_name$/;"	v
path	www/cgi-bin/upload_cgi.py	/^path = upload_path + file_name$/;"	v
path_info	server/RequestParser.hpp	/^		std::string					path_info;$/;"	m	class:RequestParser
path_translated	server/RequestParser.hpp	/^		std::string					path_translated;$/;"	m	class:RequestParser
port	server/Socket.hpp	/^		int 							port;$/;"	m	class:Socket
query_string	server/RequestParser.hpp	/^		std::string					query_string;$/;"	m	class:RequestParser
request	server/RequestParser.hpp	/^		std::string					request;$/;"	m	class:RequestParser
return_	config/ConfigBase.hpp	/^      return_type               return_;$/;"	m	class:webservconfig::ConfigBase
return_type	config/ConfigBase.hpp	/^      typedef std::pair<int, std::string>                       return_type;$/;"	t	class:webservconfig::ConfigBase
root_	config/ConfigBase.hpp	/^      std::string               root_;$/;"	m	class:webservconfig::ConfigBase
script_name	server/RequestParser.hpp	/^		std::string					script_name;$/;"	m	class:RequestParser
server	server/Socket.hpp	/^		webservconfig::Server server;$/;"	m	class:Socket
server_	config/ServerCollection.hpp	/^      std::vector<Server>   server_;$/;"	m	class:webservconfig::ServerCollection
server_name_	config/ConfigBase.hpp	/^      server_name_list_type     server_name_;$/;"	m	class:webservconfig::ConfigBase
server_name_flag_	config/ConfigBase.hpp	/^      bool                      server_name_flag_;$/;"	m	class:webservconfig::ConfigBase
server_name_list_type	config/ConfigBase.hpp	/^      typedef std::vector<std::string>                          server_name_list_type;$/;"	t	class:webservconfig::ConfigBase
set_cgi_env	server/RequestParser.cpp	/^void		RequestParser::set_cgi_env(void)$/;"	f	class:RequestParser
set_listenfd	server/Socket.cpp	/^void	Socket::set_listenfd()$/;"	f	class:Socket
set_method_and_uri	server/RequestParser.cpp	/^void		RequestParser::set_method_and_uri(void)$/;"	f	class:RequestParser
set_server	server/Socket.cpp	/^void Socket::set_server(const webservconfig::Server &s) { this->server = s; }$/;"	f	class:Socket
set_sockaddr_in	server/Socket.cpp	/^int	Socket::set_sockaddr_in()$/;"	f	class:Socket
set_socket	server/Socket.cpp	/^int		Socket::set_socket()$/;"	f	class:Socket
set_uri	server/RequestParser.cpp	/^void		RequestParser::set_uri(std::string uri_)$/;"	f	class:RequestParser
setenv_exedir	server/util_func.cpp	/^void	setenv_exedir(char **argv)$/;"	f
sigpipe_handler	main.cpp	/^void	sigpipe_handler(int sig)$/;"	f
sigpipe_wait	main.cpp	/^void	sigpipe_wait(void)$/;"	f
socket_vector_	server/SocketCollection.hpp	/^    std::vector<Socket> socket_vector_;$/;"	m	class:SocketCollection
status	server/Response.hpp	/^		int			status;$/;"	m	class:Response
strtoll	config/ConfigBase.cpp	/^webservconfig::ConfigBase::body_size_type webservconfig::ConfigBase::strtoll(std::string str) const$/;"	f	class:webservconfig::ConfigBase
sys	docker_nginx/normal_nginx/cgifile/put_parameter.py	/^import sys$/;"	i
sys	docker_nginx/normal_nginx/cgifile/test.py	/^import sys$/;"	i
sys	docker_nginx/upload_module/cgifile/input.py	/^import sys$/;"	i
sys	docker_nginx/upload_module/cgifile/put_parameter.py	/^import sys$/;"	i
sys	docker_nginx/upload_module/cgifile/test.py	/^import sys$/;"	i
sys	www/cgi-bin/test.py	/^import sys$/;"	i
transfer_encoding	server/RequestParser.hpp	/^		std::string					transfer_encoding;$/;"	m	class:RequestParser
upload_file	server/Response.cpp	/^int		Response::upload_file(const char *path, RequestParser &request)$/;"	f	class:Response
upload_path	www/cgi-bin/delete_cgi.py	/^upload_path = 'www\/upload_file\/'$/;"	v
upload_path	www/cgi-bin/sample.py	/^upload_path = 'www\/upload_file\/'$/;"	v
upload_path	www/cgi-bin/upload_cgi.py	/^upload_path = 'www\/upload_file\/'$/;"	v
upload_path_	config/ConfigBase.hpp	/^      std::string               upload_path_;$/;"	m	class:webservconfig::ConfigBase
uploaded_file	www/cgi-bin/upload_cgi.py	/^    uploaded_file = open(path, 'wb')$/;"	v
uri	server/RequestParser.hpp	/^		std::string					uri;$/;"	m	class:RequestParser
value	www/cgi-bin/sample.py	/^    value = form[key].value$/;"	v
webservconfig	config/ConfigBase.hpp	/^namespace webservconfig$/;"	n
webservconfig	config/ConfigUtils.hpp	/^namespace webservconfig$/;"	n
webservconfig	config/Location.hpp	/^namespace webservconfig$/;"	n
webservconfig	config/Server.hpp	/^namespace webservconfig$/;"	n
webservconfig	config/ServerCollection.hpp	/^namespace webservconfig$/;"	n
~ConfigBase	config/ConfigBase.cpp	/^webservconfig::ConfigBase::~ConfigBase()$/;"	f	class:webservconfig::ConfigBase
~Location	config/Location.cpp	/^webservconfig::Location::~Location()$/;"	f	class:webservconfig::Location
~RequestParser	server/RequestParser.cpp	/^RequestParser::~RequestParser(void) {}$/;"	f	class:RequestParser
~Response	server/Response.cpp	/^Response::~Response(void) {}$/;"	f	class:Response
~Server	config/Server.cpp	/^webservconfig::Server::~Server()$/;"	f	class:webservconfig::Server
~ServerCollection	config/ServerCollection.cpp	/^webservconfig::ServerCollection::~ServerCollection()$/;"	f	class:webservconfig::ServerCollection
~Socket	server/Socket.cpp	/^Socket::~Socket(void)$/;"	f	class:Socket
~SocketCollection	server/SocketCollection.cpp	/^SocketCollection::~SocketCollection()$/;"	f	class:SocketCollection
